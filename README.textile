h1. Git Sync

This project provides a script to synchronize you manifests from a GIT
repository to your Puppet master.

It is a fork of http://github.com/pdxcat/puppet-sync for more general
use cases.

h2. Usage

<pre>
Usage: git-sync -b BRANCH [options]
    -b, --branch BRANCH              Mandatory, specify the git branch to clone.
    -d, --deploy DIR                 Specify the directory to deploy to.
    -D, --delete                     Remove the specified branch from the deployment directory.
    -r, --repository URL             Git url for the repository.
    -s SUBMODULES                    Comma-seperated list of submodule paths to enable.
        --submodules-enabled
Common options:
    -V, --version                    Display the script version.
    -v, --verbose                    Be more verbose.
    -h, --help                       Show this message
</pre>

To sync a specific branch, to specific location, from a specific repository run the
script with the following arguments:

<pre>
  git-sync --branch master \
              --deploy /etc/puppet/environments \
              --repository ssh+git://git/puppet.git
</pre>

h2. Git Hook

I usually call this script from a GIT hook. If your GIT repository is located
on a different server as your Puppet master, you will need to ensure that
a certain user can login to your Puppet server, without manual interactions.
I use the "puppet" user for this purpose.

<pre>
  # change to the user and generate a key
  sudo -u puppet ssh-keygen -t rsa -b 4096 -f ~puppet/.ssh/id_rsa

  # copy the public key file to your puppetmaster server (where you have already
  # created the puppet user)
  ssh server 'cat - >> ~puppet/.ssh/authorized_keys' < ~puppet/.ssh/id_rsa.pub
</pre>

Now you need to add the following to the Git hook file:

<pre>
  #!/bin/sh
  # File: /git/puppet.git/hooks/post-update

  REPO="git@githost.cat.pdx.edu:puppet.git"
  DEPLOY="/etc/puppet/environments/production"
  SSH_ARGS="-i /path/to/privatekey"
  PUPPETMASTER="puppet@puppetmaster.cat.pdx.edu"
  SYNC_COMMAND="/usr/local/bin/puppet-sync"

  while read oldrev newrev refname
  do
    BRANCH=`echo $refname | sed -n 's/^refs\/heads\///p'`
    [ "$newrev" -eq 0 ] 2> /dev/null && DELETE='--delete' || DELETE=''
    if [ $BRANCH != "master" ]; then.
      echo "Branch is not master, therefore not pushing to $PUPPETMASTER:$DEPLOY"
      exit 0
    fi
    ssh $SSH_ARGS "$PUPPETMASTER" "$SYNC_COMMAND" \
      --branch "$BRANCH" \
      --repository "$REPO" \
      --deploy "$DEPLOY" \
      $DELETE

  done
</pre>
